
        Mostly learned in browser-console :

        console.log(window);
        console.log(window.document);
        console.log(document);
        console.dir(document);  // to access all the objects of document

        document => object is main page;

        document.getElementById('title')  => gives the complete tag
        document.getElementById('title').id => gives the tag's id value
        document.getElementById('title').class => undefined  (WHY ?) => bcz behind the scene the JS recognizes class as className
        document.getElementByID('title').className = gives the value of attribute 'class'
        document.getElementById('title').getAttribute('id')  => returns id's value
        document.getElementById('title').getAttribute('class') => return class's value

        document.getElementById('div1').setAttribute('class', 'flex justify-center items-center border border-red rounded text-green-500 gap-12')  => It sets attribute by adding  not overriding as we can see text-6xl is not removed 

        const div1 = document.getElementById('title')  // we can store the element also.

        div1.style.padding = '25px'
        div1.style.marginTop = '100px'
        
        div1.innerText => gives text 
        div1.textContent => gives hidden text also of other tags also if required
        div1.innerHTML => gives whatever is in the tag, even tags also

        document.getElementsByName('heading') => gives the element in same way by id

        /                                   Query Selectors                                  /

        document.querySelector('h1') => this gives you only the first 'h1' tag from the document
        document.querySelector('#p') => this gives you only the first 'p' id from the document
        document.querySelector('.heading') => this gives you only the first 'heading' class from the document

        document.querySelectorAll('h1') => this gives you all the 'h1' tags from the document
        document.querySelectorAll('h2') => this gives you all the 'h2' tags from the document
        
        If you try to find an element which is not in document then it will give you null

        document.querySelector('input[type="password"]')
        document.querySelector('p:first-child');

        const myul = document.querySelector('ul')
        const first = myul.querySelector('li class="list-item"')
        first  // => simply this will also give you all details about what is stored in first

        const first = document.querySelector('li class="list-item":first-child')

        first.style.backgroundColor = 'green'
        first.style.padding = '15px'
        first.innerText
        first.innerHTML
        first.textContent
        first.innerText = "Hello I am your replacement beacuse you don't have right skills for the current Tech-industry. Work On and Replace Me"

        /*                                  NODELIST                                          */

        document.querySelectorAll('li class="list-item"') => this gives you a NodeList
        NodeList(4) [li class="list-item", li class="list-item", li class="list-item", li class="list-item"]
        const tempList = document.querySelectorAll('.list-item')
        tempList
        
        The NodeList has a prototype of forEach but it doesn't means its an array
        Some properties of it may work like an arrya as you cannot apply map and filters on this

        tempList.style.color = 'red' // not working: Cannot set properties of undefined (setting 'color')
        tempList[0].style.color = 'red' // working
        'red'

        NodeList and HTML collection are not purely array.
        Before you apply any operation on any Query once check their prototypes.

        tempList.forEach( (li class="list-item") => {
            li class="list-item".style.color = 'green'
        } )
        // Completey Error 

        /*                                  HTML Collection                                          */

        document.getElementsByClassName('list-item') // HTMLCollection []
        const tempClassList = document.getElementsByClassName('list-item')

        tempClassList => is HTMLCollection []

        tempClassList.forEach( (li) => { })
        //Error : tempClassList.forEach is not a function
    
        tempClassList.forEach( (li) => { li.style.color = 'red' })
        //Error : tempClassList.forEach is not a function
        
        /* 
            When you want to operate on these NodeList and HTML Collection then you have to convert them into an array . 
        */

        with NodeList also we can do forEach but not filter or map()


        const tempClassList = document.querySelectorAll('.list-item')
        undefined

        const arrClassList = Array.from(tempClassList)
        arrClassList  => is an array , now we can apply forEach, filter, mapping

        arrClassList.forEach( function(temp) { 
            temp.style.padding = '20px'; 
            temp.style.backgroundColor = 'white';  
            temp.style.color = 'red' ;
        })

        arrClassList.forEach( function(temp) { 
            temp.innerText = "Hello!! I am a Hacker" 
        })

        /* A practical of DOM on Wikipedia of JAUNPUR-District page */
        const vector = document.querySelectorAll('.vector-toc-text');
        vector.forEach((ele) => { 
            ele.style.padding = '25px'; 
            ele.style.backgroundColor = 'black'; 
            ele.style.color = 'white'; 
        }

        vector.forEach((ele) => { 
            ele.innerText += "of Mr. ARSHIT CHAURASIA";
        }

        Practically we will be doing the same operations in script tag or from database.


    DOM-02

    Q. Which is costlier Operation querySelector or getEement by Id, classes,etc ?

    => 
    querySelector is considered a costly operation compared to more specific DOM traversal methods like getElementById or getElementsByClassName because of how it works internally.

    When you use querySelector, the browser has to parse the CSS selector you provide and then traverse the entire DOM tree to find the matching element(s). This involves more computational work compared to methods like getElementById, which directly accesses an element by its ID without needing to parse a selector or traverse the entire DOM tree.

    Additionally, querySelector returns a NodeList (or a single element if you use querySelector instead of querySelectorAll), which is a live collection. This means that the collection is updated dynamically as the DOM changes.  

    

        

    